// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

//TODO: implement this
// enum SubmissionStatus {
//   accepted
//   wrong_answer
//   compilation_error
//   runtime_error
//   time_limit_exceeded
//   memory_limit_exceeded
// }

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem       Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id                 String     @id @default(uuid()) // Primary key
  title              String // Problem title
  description        String // Problem description
  difficulty         Difficulty @default(EASY) // Enum: EASY, MEDIUM, HARD
  tags               String[] // e.g., ["dp", "two-pointer", "array"]
  userId             String // FK to User who created this problem
  examples           Json // Input/output examples
  constraints        String // Constraints description
  hints              String? // Optional hints for solving the problem
  editorial          String? // Optional link or markdown explanation
  testcases          Json // Test cases to validate solution
  codesnippet        Json // Starter code snippets per language
  referenceSolutions Json // Reference solutions for validation
  createdAt          DateTime   @default(now()) // Record creation timestamp
  updatedAt          DateTime   @updatedAt // Auto-updated on modification

  // Relations
  submissions Submission[] // All submissions for this problem
  solvedBy    ProblemSolved[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Submission {
  id            String   @id @default(uuid()) // Primary key
  userId        String // FK to User
  problemId     String // FK to Problem
  sourceCode    Json // Submitted source code
  language      String // Programming language used
  stdin         String? // Input to the program
  stdout        String? // Output from the program
  stderr        String? // Error output
  compileOutput String? // Compiler messages
  status        String // e.g., accepted, wrong_answer, etc.
  memory        String? // Memory usage
  time          String? // Execution time
  createdAt     DateTime @default(now()) // Submission creation time
  updatedAt     DateTime @updatedAt // Auto-updated on modification

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @default(uuid()) // Primary key
  submissionId  String // FK to Submission
  testCase      Int // Test case number/index
  isPassed      Boolean // Whether this test case passed
  stdout        String? // Output from the program
  expected      String // Expected output
  stderr        String? // Error output, if any
  compileOutput String? // Compilation messages (if applicable)
  status        String // Result status (e.g., passed, failed, error)
  memory        String? // Memory used
  time          String? // Time taken
  createdAt     DateTime @default(now()) // Record creation time
  updatedAt     DateTime @updatedAt // Auto-updated on modification

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId]) // Index for faster lookup by submission
}

model ProblemSolved {
  id        String   @id @default(uuid()) // Primary key
  userId    String // FK to User
  problemId String // FK to Problem
  createdAt DateTime @default(now()) // Record creation timestamp
  updatedAt DateTime @updatedAt // Auto-updated on modification

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId]) // Prevents duplicate entries for same user-problem pair
}
